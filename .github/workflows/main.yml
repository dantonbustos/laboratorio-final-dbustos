name: Deploy Staging
on:
  push:
    branches:
      - staging
jobs:
  deploy-container:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Build Docker Image
      id: build-image
      run: |
        ls -l
        docker build -f Dockerfile -t .
  # Ejecutar SAST -> Usar SonarCloud o herramienta similar.
  check-sast:
    runs-on: ubuntu-latest
  # Ejecutar SCA ->Usar Dependency Check o similar.
  check-sca:
    runs-on: ubuntu-latest
  # Construcción de la Imagen Docker.
  build-imagen-docker:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Build Docker Image
      id: build-image
      run: |
        ls -l
        docker build -f Dockerfile
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
  # Image Security -> Usar Trivy o similar.
  check-imagen-docker-security:
    runs-on: ubuntu-latest
  # Despliegue de la aplicación -> Puede utilizar Minikube o Docker de su equipo(notebook).

  # Análisis DAST -> Usar Owasp ZAP o similar
  zap_scan:
    runs-on: ubuntu-latest
    name: Scan the webapplication
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: master
      - name: ZAP Scan
        uses: zaproxy/action-full-scan@v0.12.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
          target: 'https://www.zaproxy.org/'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'
